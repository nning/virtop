#!/usr/bin/env ruby

require 'ncursesw'
require 'uri'

# Require and include virtop module. It will require libvirt.
$:.unshift(File.dirname(__FILE__) + '/../lib')
require 'virtop'
include Virtop

# Show some lines of help.
if ['-h', '--help'].include? ARGV.first
  $stderr.puts <<EOF
#{$0} {[libvirt-uri]}

libvirt-uri   is optional. Default is qemu:///system (for the local libvirt
              daemon). See http://libvirt.org/uri.html for URI format.

Key bindings:
  q      Quit.
  1..6   Sort by column number.

EOF
  exit 1
end

# Connection URL will be qemu:///system if nothing else is given as the first
# parameter.
if ARGV.size < 1
  urls = ['qemu:///system']
else
  urls = []

  ARGV.each do |url|
    uri = URI.parse url

    # Works around a deadlock if path is empty.
    if uri.scheme == 'qemu+ssh' and uri.path == ''
      raise Exception.new 'Invalid url specified: ' + uri.to_s
    else
      urls.push uri.to_s
    end
  end
end

connections = []

# Open the connection to the libvirt ressource or print out error message.
urls.each do |url|
  thread = Thread.start do
    begin
      connections.push Libvirt::open url
    rescue Libvirt::ConnectionError
      $stderr.puts 'Connection failed: ' + url.to_s
      exit 1
    end
  end

  thread.join
end

# Initialize ncurses context. Clear and print details for each domain in a 10s
# interval. Quit on keypress of 'q'.
begin
  n = Ncurses.initscr

  Ncurses.cbreak
  Ncurses.noecho
  Ncurses.halfdelay 10

  # Default sorting by first column (domain name).
  sortBy = 0

  while true
    Ncurses.clear

    n.intrflush false
    n.keypad true

    # Add topmost meta information lines to ncurses screen.
    connections.each do |c|
      begin
        n.addstr(
          c.hostname.upcase +
          "\n" +
          ' cores ' + c.cores +
          ' cpus ' + c.cpus +
          ' ghz ' + c.ghz +
          ' arch ' + c.arch +
          "\n" +
          ' mem ' + c.mem +
          ' free ' + c.memfree +
          "\n" +
          ' version ' + c.version +
          "\n\n"
        )
      rescue Libvirt::Error
      end
    end

    # Initialize table (columns).
    t = Table.new(
      'NAME',
      'STATE',
      'MEM',
      'MEM_MAX',
      'CPU_NUM',
      'CPU_TIME'
    )

    # Add information of each domain to table.
    connections.each do |c|
      c.domains.each do |d|
        t.add_row(
          d.name,
          d.state,
          d.mem,
          d.mem_max,
          d.cpu_num,
          d.cpu_time
        )
      end
    end

    # Sort table by chosen column.
    t.sort_by sortBy

    # Convert table to array of padded strings and add them to ncurses
    # screen.
    t.format.each do |line|
      n.addstr line
    end

    # Wait for single char user input.
    char = n.getch
    case char
      # Key '1' till '6'
      when 49..54
        sortBy = char - 49
      # Key 'q'
      when 113
        raise LetsExit
    end

    n.refresh
  end
rescue LetsExit
ensure
  Ncurses.echo
  Ncurses.cbreak
  Ncurses.endwin

  connections.each do |c|
    c.close
  end
end
